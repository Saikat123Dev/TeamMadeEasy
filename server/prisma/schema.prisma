datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserGender {
  male
  female
  others
}

model User {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String            @unique
  username        String?
  birthday        DateTime?
  //Date-Time
  group           Group[]
  groupMembership GroupMembership[]

  password      String
  Roles         String[]
  gender        UserGender?
  Skills        String[]
  country       String?
  about         String?
  location      String?
  linkedin      String?
  github        String?
  twitter       String?
  class10       String?
  percentage_10 String?
  class12       String?
  percentage_12 String?
  college       String?
  currentYear   String?
  dept          String?
  domain        String?
  posts         Post[]
  projects      Project[]
  experience    Experience[]
  profilePic    String?
  accounts      Account[]     @relation("UserAccounts")
  Comment       Comment[]
  CommentLike   CommentVote[]
  votes         Vote[]

  FriendRequest FriendRequest[] @relation("Sender")

  receivedFriendRequests FriendRequest[] @relation("Receiver")

  Cards Cards[]

  Message Message[]
}

model Group {
  id      String            @id @default(auto()) @map("_id") @db.ObjectId
  grpname String            @unique
  grpbio  String            @unique
  adminId String            @db.ObjectId
  members GroupMembership[]
  lanes   Lanes[]

  calenders Calendy[]

  admin   User      @relation(fields: [adminId], references: [id])
  Message Message[]
}

model GroupMembership {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  userId  String    @db.ObjectId
  groupId String    @db.ObjectId
  role    GroupRole

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  // Add a composite unique constraint for userId and groupId
  @@unique([userId, groupId])
  @@index([groupId])
}

enum GroupRole {
  MEMBER
  ADMIN
}

model Cards {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  label       String
  priority    String
  userId      String   @db.ObjectId
  assignee    User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  laneId      String   @db.ObjectId
  lanes       Lanes    @relation(fields: [laneId], references: [id])
}

model Lanes {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  cards   Cards[]
  groupId String  @db.ObjectId
  group   Group   @relation(fields: [groupId], references: [id])
}

model Calendy {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  start       DateTime
  end         DateTime
  priority    String   @default("medium")
  color       String   @default("bg-blue-500")
  groupId     String   @db.ObjectId
  group       Group    @relation(fields: [groupId], references: [id])
}

model Project {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  about        String
  techStack    String
  demovideo    String?
  collaborator String?
  liveLink     String?
  author       User    @relation(fields: [authorId], references: [id])
  authorId     String  @db.ObjectId
}

model FriendRequest {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  senderId           String              @db.ObjectId
  receiverId         String              @db.ObjectId
  status             FriendRequestStatus @default(PENDING)
  projectDescription String?
  purpose            String?
  mutualSkill        String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  groupname          String?
  groupUrl           String?
  sender             User                @relation("Sender", fields: [senderId], references: [id])
  receiver           User                @relation("Receiver", fields: [receiverId], references: [id])

  @@index([senderId])
  @@index([receiverId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Experience {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  company  String?
  duration String?
  role     String?
  author   User    @relation(fields: [authorId], references: [id])
  authorId String  @db.ObjectId
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  authorId  String   @db.ObjectId

  author User @relation(fields: [authorId], references: [id])

  comments Comment[]
  likes    Vote[]

  @@map(name: "posts")
}

// model Article {
//   id String @id @default(auto()) @map("_id") @db.ObjectId
//   content   Json?
//   slug      String?
//   published Boolean  @default(false)
//   createdAt DateTime @default(now()) @map(name: "created_at")
//   updatedAt DateTime @default(now()) @map(name: "updated_at")
//   authorId  String   @db.ObjectId

//   author User @relation(fields: [authorId], references: [id])

//   comments Comment[]
//   likes    Vote[]

//   @@map(name: "posts")
// }

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], name: "UserAccounts")

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  text      String
  createdAt DateTime @default(now())
  authorId  String   @db.ObjectId
  postId    String   @db.ObjectId

  // Self-referencing relationship
  replyToId String?   @db.ObjectId
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies   Comment[] @relation("ReplyTo")

  // Other relationships
  author User? @relation(fields: [authorId], references: [id])
  post   Post? @relation(fields: [postId], references: [id])

  votes CommentVote[]

  // Indexes
  @@index([replyToId])
  @@index([authorId])
  @@index([postId])
}

model Vote {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  postId String
  type   VoteType

  // Relations for documentation/reference
  user User? @relation(fields: [userId], references: [id])
  post Post? @relation(fields: [postId], references: [id])

  // Index for efficient querying
  @@index([userId, postId])
}

enum VoteType {
  Like
  Dislike
}

model CommentVote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  commentId String   @db.ObjectId
  type      VoteType

  user    User?    @relation(fields: [userId], references: [id])
  comment Comment? @relation(fields: [commentId], references: [id])

  @@index([userId, commentId])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String?
  createdAt DateTime @default(now())
  userId    String?  @db.ObjectId
  groupId   String?  @db.ObjectId

  User  User?  @relation(fields: [userId], references: [id])
  Group Group? @relation(fields: [groupId], references: [id])
}

// prisma/schema.prisma
// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }

// enum UserGender {
//   male
//   female
//   others
// }

// model User {
//   id              String            @id @default(auto()) @map("_id") @db.ObjectId
//   name            String
//   email           String            @unique
//   username        String?
//   birthday        DateTime?
//   //Date-Time
//   group           Group[]
//   groupMembership GroupMembership[]

//   password      String
//   Roles         String[]
//   gender        UserGender?
//   Skills        String[]
//   country       String?
//   about         String?
//   location      String?
//   linkedin      String?
//   github        String?
//   twitter       String?
//   class10       String?
//   percentage_10 String?
//   class12       String?
//   percentage_12 String?
//   college       String?
//   currentYear   String?
//   dept          String?
//   domain        String?
//   posts         Post[]
//   projects      Project[]
//   experience    Experience[]
//   profilePic    String?
//   accounts      Account[]     @relation("UserAccounts")
//   Comment       Comment[]
//   CommentLike   CommentVote[]
//   votes         Vote[]

//   FriendRequest FriendRequest[] @relation("Sender")

//   receivedFriendRequests FriendRequest[] @relation("Receiver")

//   Cards Cards[]

//   // Message Message[] @relation("UserMessages")
// }

// model Group {
//   id      String            @id @default(auto()) @map("_id") @db.ObjectId
//   grpname String            @unique
//   grpbio  String            @unique
//   adminId String            @db.ObjectId
//   members GroupMembership[]
//   lanes   Lanes[]

//   calenders Calendy[]
//   // messages  Message[] @relation("GroupMessages")

//   admin User @relation(fields: [adminId], references: [id])
// }

// model GroupMembership {
//   id      String    @id @default(auto()) @map("_id") @db.ObjectId
//   userId  String    @db.ObjectId
//   groupId String    @db.ObjectId
//   role    GroupRole

//   user  User  @relation(fields: [userId], references: [id])
//   group Group @relation(fields: [groupId], references: [id])

//   // Add a composite unique constraint for userId and groupId
//   @@unique([userId, groupId])
//   @@index([groupId])
// }

// enum GroupRole {
//   MEMBER
//   ADMIN
// }

// model Cards {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   title       String
//   description String
//   label       String
//   priority    String
//   userId      String   @db.ObjectId
//   assignee    User     @relation(fields: [userId], references: [id])
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   laneId      String   @db.ObjectId
//   lanes       Lanes    @relation(fields: [laneId], references: [id])
// }

// model Lanes {
//   id      String  @id @default(auto()) @map("_id") @db.ObjectId
//   title   String
//   cards   Cards[]
//   groupId String  @db.ObjectId
//   group   Group   @relation(fields: [groupId], references: [id])
// }

// model Calendy {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   title       String
//   description String
//   start       DateTime
//   end         DateTime
//   priority    String   @default("medium")
//   color       String   @default("bg-blue-500")
//   groupId     String   @db.ObjectId
//   group       Group    @relation(fields: [groupId], references: [id])
// }

// model Project {
//   id           String  @id @default(auto()) @map("_id") @db.ObjectId
//   title        String
//   about        String
//   techStack    String
//   demovideo    String?
//   collaborator String?
//   liveLink     String?
//   author       User    @relation(fields: [authorId], references: [id])
//   authorId     String  @db.ObjectId
// }

// model FriendRequest {
//   id                 String              @id @default(auto()) @map("_id") @db.ObjectId
//   senderId           String              @db.ObjectId
//   receiverId         String              @db.ObjectId
//   status             FriendRequestStatus @default(PENDING)
//   projectDescription String?
//   purpose            String?
//   mutualSkill        String?
//   createdAt          DateTime            @default(now())
//   updatedAt          DateTime            @updatedAt
//   groupname          String?
//   groupUrl           String?
//   sender             User                @relation("Sender", fields: [senderId], references: [id])
//   receiver           User                @relation("Receiver", fields: [receiverId], references: [id])

//   @@index([senderId])
//   @@index([receiverId])
// }

// enum FriendRequestStatus {
//   PENDING
//   ACCEPTED
//   REJECTED
// }

// model Experience {
//   id       String  @id @default(auto()) @map("_id") @db.ObjectId
//   company  String?
//   duration String?
//   role     String?
//   author   User    @relation(fields: [authorId], references: [id])
//   authorId String  @db.ObjectId
// }

// model Post {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   content   Json?
//   published Boolean  @default(false)
//   createdAt DateTime @default(now()) @map(name: "created_at")
//   updatedAt DateTime @default(now()) @map(name: "updated_at")
//   authorId  String   @db.ObjectId

//   author User @relation(fields: [authorId], references: [id])

//   comments Comment[]
//   likes    Vote[]

//   @@map(name: "posts")
// }

// // model Article {
// //   id String @id @default(auto()) @map("_id") @db.ObjectId
// //   content   Json?
// //   slug      String?
// //   published Boolean  @default(false)
// //   createdAt DateTime @default(now()) @map(name: "created_at")
// //   updatedAt DateTime @default(now()) @map(name: "updated_at")
// //   authorId  String   @db.ObjectId

// //   author User @relation(fields: [authorId], references: [id])

// //   comments Comment[]
// //   likes    Vote[]

// //   @@map(name: "posts")
// // }

// model Account {
//   id                String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId            String  @db.ObjectId
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], name: "UserAccounts")

//   @@unique([provider, providerAccountId])
// }

// model VerificationToken {
//   id      String   @id @default(auto()) @map("_id") @db.ObjectId
//   email   String
//   token   String   @unique
//   expires DateTime

//   @@unique([email, token])
// }

// model PasswordResetToken {
//   id      String   @id @default(auto()) @map("_id") @db.ObjectId
//   email   String
//   token   String   @unique
//   expires DateTime

//   @@unique([email, token])
// }

// model Comment {
//   id        String   @id @default(cuid()) @map("_id")
//   text      String
//   createdAt DateTime @default(now())
//   authorId  String   @db.ObjectId
//   postId    String   @db.ObjectId

//   // Self-referencing relationship
//   replyToId String?   @db.ObjectId
//   replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: Restrict, onUpdate: Restrict)
//   replies   Comment[] @relation("ReplyTo")

//   // Other relationships
//   author User? @relation(fields: [authorId], references: [id])
//   post   Post? @relation(fields: [postId], references: [id])

//   votes CommentVote[]

//   // Indexes
//   @@index([replyToId])
//   @@index([authorId])
//   @@index([postId])
// }

// model Vote {
//   id     String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId String
//   postId String
//   type   VoteType

//   // Relations for documentation/reference
//   user User? @relation(fields: [userId], references: [id])
//   post Post? @relation(fields: [postId], references: [id])

//   // Index for efficient querying
//   @@index([userId, postId])
// }

// enum VoteType {
//   Like
//   Dislike
// }

// model CommentVote {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId    String   @db.ObjectId
//   commentId String   @db.ObjectId
//   type      VoteType

//   user    User?    @relation(fields: [userId], references: [id])
//   comment Comment? @relation(fields: [commentId], references: [id])

//   @@index([userId, commentId])
// }

// model Message {
//   id      String @id @default(auto()) @map("_id") @db.ObjectId
//   content String

//   createdAt DateTime @default(now())
// }
